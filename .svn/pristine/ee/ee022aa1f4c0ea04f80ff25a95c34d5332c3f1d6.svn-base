package com.puxtech.ybk.hangqing.detail;

import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.puxtech.ybk.R;
import com.puxtech.ybk.hangqing.BaseHangQingFragment;
import com.puxtech.ybk.hangqing.HangQingLogger;
import com.puxtech.ybk.hangqing.charts.FormulaUtil;
import com.puxtech.ybk.hangqing.charts.KLineChartModel;
import com.puxtech.ybk.hangqing.charts.KLinePointModel;
import com.puxtech.ybk.hangqing.charts.KLineView;
import com.puxtech.ybk.hangqing.error.ErrorCode;
import com.puxtech.ybk.hangqing.exception.HangQingBasicDataErrorException;
import com.puxtech.ybk.hangqing.exception.SessionErrorException;
import com.puxtech.ybk.hangqing.jsondata.RepData;
import com.puxtech.ybk.hangqing.jsondata.getshortkline.GetShortKLineRepBody;
import com.puxtech.ybk.hangqing.jsondata.getshortkline.KPointRecord;
import com.puxtech.ybk.hangqing.protocol.RequestManager;

import org.json.JSONException;
import org.json.JSONObject;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

/**
 * Created by fanshuo on 16/5/5.
 */
public class KXianFragment extends BaseHangQingFragment {


    private int commodityId;
    private GetShortKLineRepBody getShortKLineRepBody;
    private KLineView kLineView;
    private int period = 1;//周期id
    private Timer refreshKLineTimer;
    private CustomViewPager parentViewPager;

    public static KXianFragment getFragment(int commodityId){
        Bundle bundle = new Bundle();
        bundle.putInt("commodityId", commodityId);
        KXianFragment fragment = new KXianFragment();
        fragment.setArguments(bundle);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        commodityId = getArguments().getInt("commodityId");
    }

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.hangqing_fragment_kxian, container, false);
        kLineView = (KLineView) view.findViewById(R.id.kline_view);
        kLineView.setOnShowListener(new KLineView.OnShowListener() {
            @Override
            public void onShow() {
                parentViewPager.setCanScroll(false);
            }

            @Override
            public void onHide() {
                parentViewPager.setCanScroll(true);
            }
        });
        requestShortKLine();
        return view;
    }

    public void setParentViewPager(CustomViewPager parentViewPager) {
        this.parentViewPager = parentViewPager;
    }

    /**
     * 获取k线
     */
    public void requestShortKLine(){
        new AsyncTask<Void, Void, Boolean>() {
            String msg;
            @Override
            protected Boolean doInBackground(Void... params) {
                try {
                    int marketId = myApplication.getHangQingData().getMarketId();
                    int panId = myApplication.getHangQingData().getPanId();
                    RequestManager requestManager = new RequestManager();
                    JSONObject repJson = requestManager.getShortKLine(myApplication, marketId, panId, commodityId, period, -1, 0, 600);
                    Gson gson = new Gson();
                    TypeToken typeToken = new TypeToken<RepData<GetShortKLineRepBody>>(){};
                    RepData<GetShortKLineRepBody> repData = gson.fromJson(repJson.toString(),typeToken.getType());
                    int ret = repData.getMmts().getRepHeader().getRet();
                    if(ret == 0){
                        getShortKLineRepBody = repData.getMmts().getRepBody();
                        return true;
                    }
                    else{
                        msg = repData.getMmts().getRepHeader().getMsg();
                        return false;
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                    msg = "（"+ ErrorCode.ERROR_JSON_PARSE+"）";
                    return false;
                } catch (SessionErrorException e) {
                    e.printStackTrace();
                    msg = e.getMessage();
                    return false;
                } catch (HangQingBasicDataErrorException e) {
                    e.printStackTrace();
                    msg = e.getMessage();
                    return false;
                }
            }

            @Override
            protected void onPostExecute(Boolean aBoolean) {
                super.onPostExecute(aBoolean);
                if(aBoolean){
                    if(getShortKLineRepBody.getTdll() == null || getShortKLineRepBody.getTdll().size() == 0){
                        HangQingLogger.d("k线返回数据为空");
                        return;
                    }
                    KLineChartModel kLineChartModel = new KLineChartModel();
                    List<KPointRecord> kPointRecordList = getShortKLineRepBody.getTdll();
                    List<KLinePointModel> kLinePointModelList = new ArrayList<>();
                    for (int i = 0; i < kPointRecordList.size(); i++) {
                        KPointRecord kPointRecord = kPointRecordList.get(i);
                        KLinePointModel kLinePointModel = new KLinePointModel(kPointRecord.getTime(),kPointRecord.getOpep(),kPointRecord.getClop(),kPointRecord.getHigp(),kPointRecord.getLowp(),kPointRecord.getNvol(),kPointRecord.getPrid());
                        kLinePointModelList.add(kLinePointModel);
                    }
                    kLineChartModel.setMcu(getShortKLineRepBody.getMcu());
                    kLineChartModel.setPoints(kLinePointModelList);
                    //计算pma和指标
                    FormulaUtil formulaUtil = new FormulaUtil();
                    formulaUtil.calAllPMA(kLineChartModel.getPoints());
                    formulaUtil.calAllPointMACD(kLineChartModel.getPoints());
                    formulaUtil.calAllPointKDJ(kLineChartModel.getPoints());
                    formulaUtil.calAllUpOrDown(kLineChartModel.getPoints());
                    kLineView.setkLineChartModel(kLineChartModel);
                    kLineView.invalidate();

                    //开始向右刷新k线
                    startRefreshKLine();
                }
                else{
                    //请求失败，不作任何处理
                }
            }
        }.execute();
    }

    public void startRefreshKLine(){
        refreshKLineTimer = new Timer();
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                new AsyncTask<Void, Void, Boolean>() {
                    String msg;
                    GetShortKLineRepBody rep;
                    @Override
                    protected Boolean doInBackground(Void... params) {
                        try {
                            int marketId = myApplication.getHangQingData().getMarketId();
                            int panId = myApplication.getHangQingData().getPanId();
                            RequestManager requestManager = new RequestManager();
                            List<KPointRecord> kPointRecordList = getShortKLineRepBody.getTdll();
                            KPointRecord lastPoint = kPointRecordList.get(kPointRecordList.size() - 1);
                            String lastTime;
                            if(period == 1){
                                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyyMMddHHmm");
                                lastTime = simpleDateFormat.format(new Date(lastPoint.getTime()));
                            }
                            else{
                                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyyMMdd");
                                lastTime = simpleDateFormat.format(new Date(lastPoint.getTime()));
                            }
                            long lastTimeLong = Long.parseLong(lastTime);
                            JSONObject repJson = requestManager.getShortKLine(myApplication, marketId, panId, commodityId, period, lastTimeLong, 0, 600);
                            Gson gson = new Gson();
                            TypeToken typeToken = new TypeToken<RepData<GetShortKLineRepBody>>(){};
                            RepData<GetShortKLineRepBody> repData = gson.fromJson(repJson.toString(),typeToken.getType());
                            int ret = repData.getMmts().getRepHeader().getRet();
                            if(ret == 0){
                                rep = repData.getMmts().getRepBody();
                                return true;
                            }
                            else{
                                msg = repData.getMmts().getRepHeader().getMsg();
                                return false;
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                            msg = "（"+ ErrorCode.ERROR_JSON_PARSE+"）";
                            return false;
                        } catch (SessionErrorException e) {
                            e.printStackTrace();
                            msg = e.getMessage();
                            return false;
                        } catch (HangQingBasicDataErrorException e) {
                            e.printStackTrace();
                            msg = e.getMessage();
                            return false;
                        }
                    }

                    @Override
                    protected void onPostExecute(Boolean aBoolean) {
                        super.onPostExecute(aBoolean);
                        if(aBoolean){
                            if(getShortKLineRepBody.getTdll() == null || getShortKLineRepBody.getTdll().size() == 0){
                                HangQingLogger.d("k线返回数据为空");
                                return;
                            }
                            List<KPointRecord> kPointRecordList = rep.getTdll();
                            List<KLinePointModel> kLinePointModelList = new ArrayList<>();
                            for (int i = 0; i < kPointRecordList.size(); i++) {
                                KPointRecord kPointRecord = kPointRecordList.get(i);
                                KLinePointModel kLinePointModel = new KLinePointModel(kPointRecord.getTime(),kPointRecord.getOpep(),kPointRecord.getClop(),kPointRecord.getHigp(),kPointRecord.getLowp(),kPointRecord.getNvol(),kPointRecord.getPrid());
                                kLinePointModelList.add(kLinePointModel);
                            }
                            kLineView.addNewPoints(kLinePointModelList);
                            //计算pma和指标
                            FormulaUtil formulaUtil = new FormulaUtil();
                            formulaUtil.calAllPMA(kLineView.getkLineChartModel().getPoints());
                            formulaUtil.calAllPointMACD(kLineView.getkLineChartModel().getPoints());
                            formulaUtil.calAllPointKDJ(kLineView.getkLineChartModel().getPoints());
                            kLineView.invalidate();
                        }
                        else{
                            //请求失败，不作任何处理
                        }
                    }
                }.execute();
            }
        };
        refreshKLineTimer.schedule(task, 500, 2000);

    }

    public void stopRefreshKLine(){
        if(refreshKLineTimer != null){
            refreshKLineTimer.cancel();
        }
    }


}
