package com.puxtech.ybk.hangqing.detail;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;

import com.puxtech.ybk.MainActivity;
import com.puxtech.ybk.R;
import com.puxtech.ybk.hangqing.BaseHangQingActivity;
import com.puxtech.ybk.hangqing.HangQingData;
import com.puxtech.ybk.hangqing.HangQingLogger;
import com.puxtech.ybk.hangqing.charts.FenShiChartModel;
import com.puxtech.ybk.hangqing.jsondata.getcommodities.Commodity;
import com.puxtech.ybk.hangqing.jsondata.getpriceforcommodity.GetPriceForCommodityRepBody;
import com.puxtech.ybk.hangqing.util.PriceUtil;

/**
 * Created by fanshuo on 16/4/27.
 */
public class HangQingDetailActivity extends BaseHangQingActivity {

    public static final String BUNDLE_KEY_CID = "HangQingDetailActivity.BUNDLE_KEY_CID";

    private int commodityId;//商品编号
    private MyReceiver myReceiver;
    private PanKouFragment panKouFragment;
    private FenShiFragment fenShiFragment;
    private KXianFragment kXianFragment;
    private CustomViewPager viewPager;
    private HangQingDetailPagerAdapter viewpagerAdapter;
    private ImageView ivDot1,ivDot2,ivDot3;//viewpager的三个点
    private TextView tvZuiXinJia,tvZhangFu,tvZhangFuP,tvZuoShou,tvZuiGao,tvHuanShou,tvJinKai,tvZuiDi,tvZongShou;
    private Button btnBuy,btnSell;
    private ImageButton btnBack;
    private TextView tvCName;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.hangqing_activity_detail);
        init();
        myApplication.getHangQingData().startRefreshHangQingDetail(commodityId);
        myApplication.getHangQingData().getHangQingDetailController().requestShortTimeLine(commodityId);
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        unregisterReceiver(myReceiver);
        myApplication.getHangQingData().stopRefreshHangQingDetail();
        myApplication.getHangQingData().getHangQingDetailController().stopRefreshTimeLine();
    }

    //private methods
    private void init() {
        initTopPriceWidget();
        ivDot1 = (ImageView) findViewById(R.id.iv_dot1);
        ivDot2 = (ImageView) findViewById(R.id.iv_dot2);
        ivDot3 = (ImageView) findViewById(R.id.iv_dot3);
        btnBuy = (Button) findViewById(R.id.btn_buy);
        btnSell = (Button) findViewById(R.id.btn_sell);
        btnBack = (ImageButton) findViewById(R.id.btn_back);
        tvCName = (TextView) findViewById(R.id.tv_cname);
        btnBuy.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent();
                Commodity commodity = myApplication.getHangQingData().getCommodityById(commodityId);
                if(commodity != null){
                    String code = commodity.getCcod();
                    intent.putExtra(MainActivity.KEY_COMMODITY_CODE, code);
                    intent.putExtra(MainActivity.KEY_TRADE_FLAG,true);
                    setResult(RESULT_OK, intent);
                }
                else{
                    setResult(RESULT_CANCELED,intent);
                }
                finish();
            }
        });
        btnSell.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent();
                Commodity commodity = myApplication.getHangQingData().getCommodityById(commodityId);
                if(commodity != null){
                    String code = commodity.getCcod();
                    intent.putExtra(MainActivity.KEY_COMMODITY_CODE, code);
                    intent.putExtra(MainActivity.KEY_TRADE_FLAG,false);
                    setResult(RESULT_OK, intent);
                }
                else{
                    setResult(RESULT_CANCELED,intent);
                }
                finish();
            }
        });
        btnBack.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                onBackPressed();
            }
        });
        commodityId = getIntent().getIntExtra(BUNDLE_KEY_CID, -1);
        Commodity commodity = myApplication.getHangQingData().getCommodityById(commodityId);
        if(commodity != null){
            tvCName.setText(commodity.getCnam());
        }
        else{
            tvCName.setText("");
        }
        initViewPager();
        myReceiver = new MyReceiver();
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(HangQingData.ACTION_PRICE_FOR_COMMODITY);
        intentFilter.addAction(HangQingData.ACTION_SHORT_TIME_LINE);
        registerReceiver(myReceiver, intentFilter);
    }

    private void initTopPriceWidget(){
        tvZuiXinJia = (TextView) findViewById(R.id.tv_zuixinjia);
        tvZhangFu = (TextView) findViewById(R.id.tv_zhangfu);
        tvZhangFuP = (TextView) findViewById(R.id.tv_zhangfu_p);
        tvZuoShou = (TextView) findViewById(R.id.tv_zuoshou);
        tvZuiGao = (TextView) findViewById(R.id.tv_zuigao);
        tvHuanShou = (TextView) findViewById(R.id.tv_huanshou);
        tvJinKai = (TextView) findViewById(R.id.tv_jinkai);
        tvZuiDi = (TextView) findViewById(R.id.tv_zuidi);
        tvZongShou = (TextView) findViewById(R.id.tv_zongshou);
    }

    private void initViewPager(){
        panKouFragment = PanKouFragment.getFragment(commodityId);
        fenShiFragment = FenShiFragment.getFragment();
        kXianFragment = KXianFragment.getFragment(commodityId);
        viewPager = (CustomViewPager) findViewById(R.id.viewpager);
        viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {

            }

            @Override
            public void onPageSelected(int position) {
                if(position == 0){
                    ivDot1.setImageResource(R.drawable.shape_dot_light);
                    ivDot2.setImageResource(R.drawable.shape_dot_dark);
                    ivDot3.setImageResource(R.drawable.shape_dot_dark);
                }
                else if(position == 1){
                    ivDot1.setImageResource(R.drawable.shape_dot_dark);
                    ivDot2.setImageResource(R.drawable.shape_dot_light);
                    ivDot3.setImageResource(R.drawable.shape_dot_dark);
                }
                else if(position == 2){
                    ivDot1.setImageResource(R.drawable.shape_dot_dark);
                    ivDot2.setImageResource(R.drawable.shape_dot_dark);
                    ivDot3.setImageResource(R.drawable.shape_dot_light);
                }
            }

            @Override
            public void onPageScrollStateChanged(int state) {

            }
        });
        viewpagerAdapter = new HangQingDetailPagerAdapter(getSupportFragmentManager());
        viewPager.setAdapter(viewpagerAdapter);
        viewPager.setOffscreenPageLimit(3);
        viewPager.setCurrentItem(0);

        fenShiFragment.setParentViewPager(viewPager);
        kXianFragment.setParentViewPager(viewPager);

    }

    private void refreshTopPrice(GetPriceForCommodityRepBody repBody){
        //昨收
        float closePrice = repBody.getYclo();
        if(closePrice == 0){
            tvZuoShou.setText("--");
            tvZuoShou.setTextColor(getResources().getColor(R.color.hangqing_white_text));
        }
        else{
            String closePriceString = PriceUtil.keepPrecision(closePrice, repBody.getMcu());
            tvZuoShou.setText(closePriceString);
        }
        //最新价
        float latestPrice = repBody.getLatp();
        if(latestPrice == 0){
            tvZuiXinJia.setText("--");
            tvZuiXinJia.setTextColor(getResources().getColor(R.color.hangqing_white_text));
        }
        else{
            String latestPriceString = PriceUtil.keepPrecision(latestPrice, repBody.getMcu());
            tvZuiXinJia.setText(latestPriceString);
            setTextViewColorByPrice(tvZuiXinJia,latestPrice,closePrice);
            //最新涨跌
            float changePrice = latestPrice - closePrice;
            String changePriceString = PriceUtil.keepPrecision(changePrice, repBody.getMcu());
            tvZhangFu.setText(changePriceString);
            setTextViewColorByPrice(tvZhangFu,latestPrice,closePrice);
            //最新涨跌百分比
            float changePriceP = changePrice/closePrice*100;
            String changePricePString = PriceUtil.formatPercentage(changePriceP);
            tvZhangFuP.setText(changePricePString);
            setTextViewColorByPrice(tvZhangFuP, latestPrice, closePrice);
        }

        //今开
        float openPrice = repBody.getOpep();
        if(openPrice == 0){
            tvJinKai.setText("--");
            tvJinKai.setTextColor(getResources().getColor(R.color.hangqing_white_text));
        }
        else{
            tvJinKai.setText(PriceUtil.keepPrecision(openPrice, repBody.getMcu()));
            setTextViewColorByPrice(tvJinKai, openPrice, closePrice);
        }
        //最高
        float highestPrice = repBody.getHigp();
        if(highestPrice == 0){
            tvZuiGao.setText("--");
            tvZuiGao.setTextColor(getResources().getColor(R.color.hangqing_white_text));
        }
        else{
            tvZuiGao.setText(PriceUtil.keepPrecision(highestPrice, repBody.getMcu()));
            setTextViewColorByPrice(tvZuiGao,highestPrice,closePrice);
        }
        //最低
        float lowestPrice = repBody.getLowp();
        if(lowestPrice == 0){
            tvZuiDi.setText("--");
            tvZuiDi.setTextColor(getResources().getColor(R.color.hangqing_white_text));
        }
        else{
            tvZuiDi.setText(PriceUtil.keepPrecision(lowestPrice, repBody.getMcu()));
            setTextViewColorByPrice(tvZuiDi,lowestPrice,closePrice);
        }
        //换手
        if(repBody.getExtd().getHola() == 0){
            tvHuanShou.setText("--");
        }
        else{
            float huanShou = repBody.getTvol()/repBody.getExtd().getHola()*100;
            String huanShouString = PriceUtil.formatPercentage(huanShou);
            tvHuanShou.setText(huanShouString);
        }

        //总手
        int zongShou = repBody.getTvol();
        tvZongShou.setText(zongShou+"");

    }

    private void setTextViewColorByPrice(TextView tv, float price, float closePrice){
        if(price > closePrice){
            tv.setTextColor(getResources().getColor(R.color.hangqing_red_text));
        }
        else if(price == closePrice){
            tv.setTextColor(getResources().getColor(R.color.hangqing_white_text));
        }
        else {
            tv.setTextColor(getResources().getColor(R.color.hangqing_green_text));
        }
    }


    //inner classes


    class MyReceiver extends BroadcastReceiver{
        @Override
        public void onReceive(Context context, Intent intent) {
            if(HangQingData.ACTION_PRICE_FOR_COMMODITY.equals(intent.getAction())){
                GetPriceForCommodityRepBody rep = (GetPriceForCommodityRepBody) intent.getSerializableExtra(HangQingData.BUNDLE_KEY_PRICE_FOR_COMMODITY);
                HangQingLogger.d("收到广播");
                panKouFragment.onReceivedPriceData(rep);
                refreshTopPrice(rep);
            }
            if(HangQingData.ACTION_SHORT_TIME_LINE.equals(intent.getAction())){
                FenShiChartModel fenShiChartModel = (FenShiChartModel) intent.getSerializableExtra(HangQingData.BUNDLE_KEY_FENSHI_CHART_MODEL);
                panKouFragment.onReceivedFenShiData(fenShiChartModel);
                fenShiFragment.onReceivedFenShiData(fenShiChartModel);
            }
            if(HangQingData.ACTION_NEW_SHORT_TIME_LINE.equals(intent.getAction())){
                FenShiChartModel fenShiChartModel = (FenShiChartModel) intent.getSerializableExtra(HangQingData.BUNDLE_KEY_FENSHI_CHART_MODEL);
                fenShiFragment.onReceivedNewFenShiData(fenShiChartModel);
            }
        }
    }

    /**
     * FragmentViewPager的Adapter
     */
    class HangQingDetailPagerAdapter extends FragmentPagerAdapter{
        public HangQingDetailPagerAdapter(FragmentManager fm) {
            super(fm);
        }
        @Override
        public Fragment getItem(int position) {
            if(position == 0){
                return panKouFragment;
            }
            else if(position == 1){
                return fenShiFragment;
            }
            else {
                return kXianFragment;
            }
        }
        @Override
        public int getCount() {
            return 3;
        }
    }
}
