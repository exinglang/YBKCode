package com.puxtech.ybk.jiaoyi.httpmanager;

import android.content.Context;

import com.puxtech.ybk.jiaoyi.TradeHelper;
import com.puxtech.ybk.jiaoyi.network.HttpSender;
import com.puxtech.ybk.jiaoyi.responsedata.CheckCodeResponseData;
import com.puxtech.ybk.jiaoyi.responsedata.TradeLogonResponseData;
import com.puxtech.ybk.util.ActivityUtils;
import com.puxtech.ybk.util.MD5;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

/**
 * Created by mac on 16/4/21.
 */
public class HttpManagerLogin extends HttpManagerBase {

    private static final String URL_TYPE = "login";

    private static final String VERSION = "1.0.0";

    public HttpManagerLogin(Context context) {
        super(context);


    }

    //登录验证码
    public CheckCodeResponseData requestCheckCode() {
        CheckCodeResponseData responseData = new CheckCodeResponseData();
        String requestData;
        String rName = "get_valcode";
        try {

            HashMap<String, String> map = new HashMap<>();
//            map.put("COMMODITY_ID", commodityCode);
//            map.put("A_N", "");
//            map.put("P_P", "");
            requestData = getRequestData(map, rName);
            outPutRequestLog(requestData);
        } catch (Exception e) {
            createError(responseData, e);
            return responseData;
        }
        HttpSender httpSender = new HttpSender();
        String responseStr;
        try {
            responseStr = httpSender.requestJson(requestData.getBytes(), getPublicUrl(), URL_TYPE, rName);
        } catch (Exception e) {
            networkError(responseData, e);
            return responseData;
        }
        responseData.parseXML(responseStr);
        return responseData;
    }

    //登录交易
    public TradeLogonResponseData requestTradeLogin(String userId,String password,String checkCode,String checkCodeId) {
        TradeLogonResponseData responseData = new TradeLogonResponseData();
        String requestData;
        String rName = "login";
        byte[] logonKey;
        try {
            logonKey = MD5.getMD5(userId + password);// 登录加解密密钥
            long time = System.currentTimeMillis();

            HashMap<String, String> map = new HashMap<>();
            map.put("USER_ID", userId);
            map.put("VALID_CODE", checkCode);
            map.put("VALID_UUID",checkCodeId);
            map.put("VERSIONINFO", VERSION);
            map.put("LOGIN_TIME",time+"");
            map.put("CLT_TOKEN", TradeHelper.getToken(time, userId, password, logonKey));
            requestData = getRequestData(map, rName);
            outPutRequestLog(requestData);
        } catch (Exception e) {
            createError(responseData, e);
            return responseData;
        }
        HttpSender httpSender = new HttpSender();
        String responseStr;
        try {
            responseStr = httpSender.requestJson(requestData.getBytes(), getPublicUrl(), URL_TYPE, rName);
        } catch (Exception e) {
            networkError(responseData, e);
            return responseData;
        }
        responseData.parseXML(myapp,responseStr, logonKey);
        return responseData;
    }

    // 将map中的值,组成json
    protected String getRequestData(HashMap<String, String> map, String rName) {
        JSONObject json = new JSONObject();
        String req = null;
        try {
            Iterator<Map.Entry<String, String>> it = map.entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry<String, String> m = it.next();
                String key = m.getKey();
                String value = m.getValue();
                json.put(key, value);
            }
            req = jsonRequestPutHead(json, rName);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return req;

    }

    // 给一些复用的KEY赋值
    protected String jsonRequestPutHead(JSONObject bodyJson, String name)
            throws JSONException {

//        JSONObject bodyKey = new JSONObject();
//        bodyKey.put(TAG_REQ_BODY, bodyJson);


        JSONObject headerJson = new JSONObject();
        headerJson.put(TAG_CLT_VERSION, VERSION);
        headerJson.put(TAG_CLT_TIMESTAMP, System.currentTimeMillis());
        headerJson.put(TAG_CLT_SEQ, System.currentTimeMillis());


//        JSONObject headerKey = new JSONObject();
//        headerKey.put(TAG_REQ_HEADER, headerJson);

        JSONObject mmtsBody = new JSONObject();
        mmtsBody.put(TAG_REQ_BODY, bodyJson);
        mmtsBody.put(TAG_REQ_HEADER, headerJson);

        JSONObject mmts = new JSONObject();
        mmts.put(TAG_MMTS, mmtsBody);

////        json.put("name", name);
////        if (!(name.equals("get_version") || name.equals("logon"))) {
////            // get_version和logon没有这两个属性
////            json.put("SESSION_ID", myapp.getCurrentTradeEntity().getOtherData().getSid());
////            json.put("USER_ID", myapp.getCurrentTradeEntity().getUserId());
////        }
//        if (!name.equals("get_version")) {
//            // get_version没有此键值
//            rep.put("version", "1.0");
//        }
//        JSONObject mmts = new JSONObject();
//        mmts.put("MMTS", rep);
////        TradeLogRecorder tlr = new TradeLogRecorder();
////        tlr.saveLog(myapp, "请求:"+json.toString());
        return mmts.toString();
    }

    private String getPublicUrl() {
        return myapp.getQiDongData().getContentsServerEntity().getYwSystemEntity().getJysList().get(0).getEnvList().get(0).getYwList().get(0).getLlList().get(0).getUrl();

    }

}
