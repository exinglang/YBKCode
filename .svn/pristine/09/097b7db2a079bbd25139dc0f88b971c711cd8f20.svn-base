package com.puxtech.ybk.hangqing.controller;

import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Handler;
import android.widget.Toast;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.puxtech.ybk.MyApplication;
import com.puxtech.ybk.hangqing.HangQingData;
import com.puxtech.ybk.hangqing.HangQingLogger;
import com.puxtech.ybk.hangqing.charts.FenShiChartModel;
import com.puxtech.ybk.hangqing.charts.FenShiPointModel;
import com.puxtech.ybk.hangqing.error.ErrorCode;
import com.puxtech.ybk.hangqing.exception.HangQingBasicDataErrorException;
import com.puxtech.ybk.hangqing.exception.SessionErrorException;
import com.puxtech.ybk.hangqing.jsondata.RepData;
import com.puxtech.ybk.hangqing.jsondata.getpriceforcommodity.GetPriceForCommodityRepBody;
import com.puxtech.ybk.hangqing.jsondata.getshorttimeline.GetShortTimeLineRepBody;
import com.puxtech.ybk.hangqing.jsondata.getshorttimeline.TradeDay;
import com.puxtech.ybk.hangqing.jsondata.getshorttimeline.TradeDayRecord;
import com.puxtech.ybk.hangqing.jsondata.gettradetime.GetTradeTimeRepBody;
import com.puxtech.ybk.hangqing.protocol.RequestManager;
import com.puxtech.ybk.util.ActivityUtils;

import org.json.JSONException;
import org.json.JSONObject;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import java.util.Timer;
import java.util.TimerTask;

/**
 * Created by fanshuo on 16/4/28.
 */
public class HangQingDetailController {

    private Context context;
    private MyApplication mApplication;
    private Timer refreshPriceTimer;
    private Handler handler;
    private Timer refreshTimeLineTimer;
    private GetShortTimeLineRepBody getShortTimeLineRepBody;

    public HangQingDetailController(Context context) {
        this.context = context;
        this.mApplication = (MyApplication) context.getApplicationContext();
        this.handler = new Handler();
    }


    //private methods
    private long getTimeByTimePoint(String dateStr, String timeStr) throws Exception{
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmm");
        dateFormat.setTimeZone(TimeZone.getTimeZone("GMT+08:00"));
        int time = Integer.parseInt(timeStr);
        //补全四位数字
        //00:01~00:09
        if(time < 10){
            timeStr = "000"+timeStr;
        }
        //00:10～00:59
        else if(time < 100){
            timeStr = "00"+timeStr;
        }
        //01:00~09:59
        else if(time < 1000){
            timeStr = "0"+timeStr;
        }
        Date date = dateFormat.parse(dateStr + timeStr);
        return date.getTime();
    }


    //public methods

    /**
     * 开始请求商品详情
     */
    public void startRequestPriceForCommodity(final int cid){
        refreshPriceTimer = new Timer();
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                try {
                    MyApplication mApplication = (MyApplication) context.getApplicationContext();
                    RequestManager requestManager = new RequestManager();
                    int marketId = mApplication.getHangQingData().getMarketId();
                    int panId = mApplication.getHangQingData().getPanId();
                    if (cid == -1){
                        return;
                    }
                    JSONObject repJson = requestManager.getPriceForCommodity(mApplication, marketId, panId, cid, 0, 0,0,5);
                    Gson gson = new Gson();
                    TypeToken typeToken = new TypeToken<RepData<GetPriceForCommodityRepBody>>(){};
                    RepData<GetPriceForCommodityRepBody> repData = gson.fromJson(repJson.toString(),typeToken.getType());
                    int ret = repData.getMmts().getRepHeader().getRet();
                    if(ret == 0){
                        //发送广播
                        Intent intent = new Intent();
                        intent.setAction(HangQingData.ACTION_PRICE_FOR_COMMODITY);
                        intent.putExtra(HangQingData.BUNDLE_KEY_PRICE_FOR_COMMODITY, repData.getMmts().getRepBody());
                        intent.setPackage(context.getPackageName());
                        context.sendBroadcast(intent);
                    }
                    else{
                        //TODO 获取失败
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                } catch (final SessionErrorException e) {
                    e.printStackTrace();
                } catch (final HangQingBasicDataErrorException e) {
                    e.printStackTrace();
                }
            }
        };
        refreshPriceTimer.schedule(task, 100, 2000);
    }

    /**
     * 停止请求商品详情
     */
    public void stopRequestPriceForCommodity(){

        refreshPriceTimer.cancel();
    }

    /**
     * 获取分时
     */
    public void requestShortTimeLine(final int commodityId){
        new AsyncTask<Void, Void, Boolean>() {
            String msg;

            @Override
            protected Boolean doInBackground(Void... params) {
                try {
                    int marketId = mApplication.getHangQingData().getMarketId();
                    int panId = mApplication.getHangQingData().getPanId();
                    RequestManager requestManager = new RequestManager();
                    JSONObject repJson = requestManager.getShortTimeLine(mApplication, marketId, panId, commodityId,-1,0);
                    Gson gson = new Gson();
                    TypeToken typeToken = new TypeToken<RepData<GetShortTimeLineRepBody>>(){};
                    RepData<GetShortTimeLineRepBody> repData = gson.fromJson(repJson.toString(),typeToken.getType());
                    int ret = repData.getMmts().getRepHeader().getRet();
                    if(ret == 0){
                        getShortTimeLineRepBody = repData.getMmts().getRepBody();
                        return true;
                    }
                    else{
                        msg = repData.getMmts().getRepHeader().getMsg();
                        return false;
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                    msg = "（"+ ErrorCode.ERROR_JSON_PARSE+"）";
                    return false;
                } catch (SessionErrorException e) {
                    e.printStackTrace();
                    msg = e.getMessage();
                    return false;
                } catch (HangQingBasicDataErrorException e) {
                    e.printStackTrace();
                    msg = e.getMessage();
                    return false;
                }
            }

            @Override
            protected void onPostExecute(Boolean aBoolean) {
                super.onPostExecute(aBoolean);
                if(aBoolean){
                    //todo
                    List<TradeDay> tradeDayList = getShortTimeLineRepBody.getTdli();
                    if(tradeDayList == null || tradeDayList.size() == 0){
                        HangQingLogger.d("分时数据为空");
                        return;
                    }
                    TradeDay tradeDay = tradeDayList.get(tradeDayList.size() - 1);
                    List<TradeDayRecord> recordList = tradeDay.getTdll();
                    List<FenShiPointModel> fenShiPointModelList = new ArrayList<>();
                    for (int i = 0; i < recordList.size(); i++) {
                        TradeDayRecord record = recordList.get(i);
                        long time;
                        try {
                            time = getTimeByTimePoint(tradeDay.getTday(), record.getDivt());
                        } catch (Exception e) {
                            e.printStackTrace();
                            continue;
                        }
                        FenShiPointModel fenShiPointModel = new FenShiPointModel(time,record.getFormatedDivt(),record.getLatp(),record.getAvgp(),record.getNvol());
                        fenShiPointModelList.add(fenShiPointModel);
                    }
                    FenShiChartModel fenShiChartModel = new FenShiChartModel();
                    fenShiChartModel.setHighestPrice(getShortTimeLineRepBody.getHigp());
                    fenShiChartModel.setLowestPrice(getShortTimeLineRepBody.getLowp());
                    fenShiChartModel.setOpenPrice(getShortTimeLineRepBody.getOpep());
                    fenShiChartModel.setYesterdayClosePrice(getShortTimeLineRepBody.getYclo());
                    fenShiChartModel.setMcu(getShortTimeLineRepBody.getMcu());
                    fenShiChartModel.setPoints(fenShiPointModelList);
                    //发送广播
                    Intent intent = new Intent();
                    intent.setAction(HangQingData.ACTION_SHORT_TIME_LINE);
                    intent.putExtra(HangQingData.BUNDLE_KEY_FENSHI_CHART_MODEL, fenShiChartModel);
                    intent.setPackage(context.getPackageName());
                    context.sendBroadcast(intent);


                    //有分时数据才开始刷新分时
                    if(getShortTimeLineRepBody.getTdli().get(0).getTdll() != null && getShortTimeLineRepBody.getTdli().get(0).getTdll().size() > 0){
                        //刷新分时
                        startRefreshTimeLine(commodityId);
                    }
                }
                else{
                    ActivityUtils.showCenterToast(context, msg, Toast.LENGTH_LONG);
                }
            }
        }.execute();
    }

    public void startRefreshTimeLine(final int commodityId){
        refreshTimeLineTimer = new Timer();
        TimerTask refreshTimeLineTask = new TimerTask() {
            @Override
            public void run() {
                new AsyncTask<Void,Void,Boolean>(){
                    String msg;
                    GetShortTimeLineRepBody rep;
                    @Override
                    protected Boolean doInBackground(Void... params) {
                        try {
                            int marketId = mApplication.getHangQingData().getMarketId();
                            int panId = mApplication.getHangQingData().getPanId();
                            RequestManager requestManager = new RequestManager();
                            long time;
                            try {
                                List<TradeDayRecord> recordList = getShortTimeLineRepBody.getTdli().get(0).getTdll();
                                TradeDayRecord tradeDayRecord = recordList.get(recordList.size()-1);
                                time = getTimeByTimePoint(getShortTimeLineRepBody.getTdli().get(0).getTday(), tradeDayRecord.getDivt());
                            } catch (Exception e) {
                                e.printStackTrace();
                                msg = e.getMessage();
                                return false;
                            }
                            JSONObject repJson = requestManager.getShortTimeLine(mApplication, marketId, panId, commodityId,time,1);
                            Gson gson = new Gson();
                            TypeToken typeToken = new TypeToken<RepData<GetShortTimeLineRepBody>>(){};
                            RepData<GetShortTimeLineRepBody> repData = gson.fromJson(repJson.toString(),typeToken.getType());
                            int ret = repData.getMmts().getRepHeader().getRet();
                            if(ret == 0){
                                rep = repData.getMmts().getRepBody();
                                return true;
                            }
                            else{
                                msg = repData.getMmts().getRepHeader().getMsg();
                                return false;
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                            msg = "（"+ ErrorCode.ERROR_JSON_PARSE+"）";
                            return false;
                        } catch (SessionErrorException e) {
                            e.printStackTrace();
                            msg = e.getMessage();
                            return false;
                        } catch (HangQingBasicDataErrorException e) {
                            e.printStackTrace();
                            msg = e.getMessage();
                            return false;
                        }
                    }

                    @Override
                    protected void onPostExecute(Boolean aBoolean) {
                        super.onPostExecute(aBoolean);
                        if(aBoolean){
                            //todo
                            List<TradeDay> tradeDayList = rep.getTdli();
                            if(tradeDayList == null || tradeDayList.size() == 0){
                                HangQingLogger.d("分时数据为空");
                                return;
                            }
                            TradeDay tradeDay = tradeDayList.get(tradeDayList.size() - 1);
                            List<TradeDayRecord> recordList = tradeDay.getTdll();
                            if(recordList.size() <= 0){
                                return;
                            }
                            //追加到原来的list中去
                            getShortTimeLineRepBody.getTdli().get(0).getTdll().addAll(recordList);
                            List<FenShiPointModel> fenShiPointModelList = new ArrayList<>();
                            for (int i = 0; i < recordList.size(); i++) {
                                TradeDayRecord record = recordList.get(i);
                                long time;
                                try {
                                    time = getTimeByTimePoint(tradeDay.getTday(), record.getDivt());
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    continue;
                                }
                                FenShiPointModel fenShiPointModel = new FenShiPointModel(time,record.getDivt(),record.getLatp(),record.getAvgp(),record.getNvol());
                                fenShiPointModelList.add(fenShiPointModel);
                            }
                            FenShiChartModel fenShiChartModel = new FenShiChartModel();
                            fenShiChartModel.setHighestPrice(getShortTimeLineRepBody.getHigp());
                            fenShiChartModel.setLowestPrice(getShortTimeLineRepBody.getLowp());
                            fenShiChartModel.setOpenPrice(getShortTimeLineRepBody.getOpep());
                            fenShiChartModel.setYesterdayClosePrice(getShortTimeLineRepBody.getYclo());
                            fenShiChartModel.setMcu(getShortTimeLineRepBody.getMcu());
                            fenShiChartModel.setPoints(fenShiPointModelList);
                            //发送广播
                            Intent intent = new Intent();
                            intent.setAction(HangQingData.ACTION_NEW_SHORT_TIME_LINE);
                            intent.putExtra(HangQingData.BUNDLE_KEY_FENSHI_CHART_MODEL, fenShiChartModel);
                            intent.setPackage(context.getPackageName());
                            context.sendBroadcast(intent);
                        }
                        else{
                            HangQingLogger.e(msg);
                        }
                    }
                }.execute();
            }
        };
        refreshTimeLineTimer.schedule(refreshTimeLineTask,500,2000);
    }

    public void stopRefreshTimeLine(){
        if(refreshTimeLineTimer != null){
            refreshTimeLineTimer.cancel();
        }
    }



}
